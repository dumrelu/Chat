/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chat.client;

import com.chat.constants.Constants;
import com.chat.packet.io.PacketReceiver;
import com.chat.packet.io.PacketSender;
import com.chat.user.UserData;
import java.awt.Color;
import java.awt.Rectangle;
import java.io.IOException;
import java.net.Socket;
import static java.util.Collections.list;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Relu
 */
public class GUI extends javax.swing.JFrame {
    public static final int INFO = 1;
    public static final int ERROR = 2;
    public static final int BCAST = 3;
    public static final int PRIVATE = 4;
    
    /**
     * Creates new form GUI
     * @param sender
     * @param receiver
     */
    public GUI(PacketSender sender, PacketReceiver receiver) {
        initComponents();
        messageTextPane.requestFocus();
        
        this.sender = sender;
        this.receiver = receiver;
        this.parser = new CommandParser(sender);
        
        this.model = new DefaultListModel();
        this.userList.setModel(model);
        
        doc = chatTextPane.getStyledDocument();
        styleMap = new HashMap<>();
        
        Style style = chatTextPane.addStyle("info", null);
        StyleConstants.setForeground(style, Color.GREEN);
        styleMap.put(INFO, style);
        
        style = chatTextPane.addStyle("error", null);
        StyleConstants.setForeground(style, Color.RED);
        styleMap.put(ERROR, style);
        
        style = chatTextPane.addStyle("bcast", null);
        StyleConstants.setForeground(style, Color.BLACK);
        styleMap.put(BCAST, style);
        
        style = chatTextPane.addStyle("private", null);
        StyleConstants.setForeground(style, Color.BLUE);
        styleMap.put(PRIVATE, style);
        
        addMessage("Use /connect \"username\" to connect to the server.", INFO);
    }
    
    public PacketSender getSender()
    {
        return sender;
    }
    
    public PacketReceiver getReceiver()
    {
        return receiver;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageTextPane = new javax.swing.JTextPane();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Chat"); // NOI18N
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        chatTextPane.setEditable(false);
        chatTextPane.setName(""); // NOI18N
        chatTextPane.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(chatTextPane);

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "fas", "fsa", "fas", "f", "saf", "af", "sa", "sa", "sfa", "saf", "fsa", "asf", "afsa", "ssfa", "afs", "asf", "afs", "fas", "afs", "fas", "afs", "fas", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userList.setRequestFocusEnabled(false);
        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                userListMousePressed(evt);
            }
        });
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(userList);

        messageTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageTextPaneKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(messageTextPane);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(sendButton)
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public synchronized void addMessage(String message, int messageType)
    {
        if(message.isEmpty())
            return;
        
        Style style = styleMap.get(messageType);
        if(style == null)
            return;
        
        try {
            doc.insertString(doc.getLength(), message + "\n", style);
            chatTextPane.scrollRectToVisible(new Rectangle(0, chatTextPane.getBounds(null).height,1,1));
        } catch (BadLocationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void addUser(UserData userData)
    {
        if(model.indexOf(userData.getUsername()) != -1)
            return;
        
        model.addElement(userData.getUsername());
    }
    
    public void removeUser(String username)
    {
        model.removeElement(username);
    }
    
    private void onSendMessage()
    {
        parser.process(messageTextPane.getText());
        
        if(userList.getSelectedIndex() == -1)
            messageTextPane.setText("");
        else
            messageTextPane.setText("/msg " + userList.getSelectedValue() + " ");
    }
    
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        onSendMessage();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageTextPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextPaneKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            onSendMessage();
            evt.consume();
        }
    }//GEN-LAST:event_messageTextPaneKeyPressed

    private void userListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMousePressed

        int index = userList.locationToIndex(evt.getPoint());
        Rectangle rec = userList.getCellBounds(index, index);
        if (rec==null || !rec.contains(evt.getPoint())){
            userList.clearSelection();
        }
    }//GEN-LAST:event_userListMousePressed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        userList.clearSelection();
    }//GEN-LAST:event_formMousePressed

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        if(userList.getSelectedIndex() == -1)
            messageTextPane.setText("");
        else
            messageTextPane.setText("/msg " + userList.getSelectedValue() + " ");
    }//GEN-LAST:event_userListValueChanged

    public void close()
    {
        sender.stop();
        receiver.stop();
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Socket socket = new Socket("localhost", Constants.PORT);
                    PacketSender sender = new PacketSender(socket);
                    PacketReceiver receiver = new PacketReceiver(socket);
                    
                    sender.start();
                    receiver.start();
                    
                    GUI gui = new GUI(sender, receiver);
                    
                    SenderSubscriber ss = new SenderSubscriber(gui);
                    sender.subscribe(ss);
                    
                    ReceiverSubscriber rs = new ReceiverSubscriber(gui);
                    receiver.subscribe(rs);
                    
                    gui.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane chatTextPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane messageTextPane;
    private javax.swing.JButton sendButton;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
    private final StyledDocument doc;
    private final Map<Integer, Style> styleMap;
    private final PacketSender sender;
    private final PacketReceiver receiver;
    private final CommandParser parser;
    private final DefaultListModel model;
}
